Aquí tienes el desarrollo del **Tema 4: Funciones en JavaScript**:

---

### **4. Funciones**

Las funciones son bloques de código reutilizables que realizan una tarea específica. Se pueden invocar en cualquier momento y ayudan a organizar y modularizar el código.

---

#### **4.1. ¿Qué es una función?**

Una función es un conjunto de instrucciones que realiza una tarea específica.  
- **Declaración**: Se define una vez.  
- **Invocación**: Se llama tantas veces como sea necesario.

**Sintaxis básica:**  
```javascript
function nombreDeLaFuncion(parametros) {
    // Código a ejecutar
    return resultado; // (Opcional)
}
```

**Ejemplo básico:**  
```javascript
function saludar(nombre) {
    return "Hola, " + nombre + "!";
}

console.log(saludar("Ana")); // "Hola, Ana!"
```

---

#### **4.2. Tipos de funciones**

##### **4.2.1. Funciones declarativas**  
Se declaran con la palabra clave `function` y tienen un nombre identificador.

**Ejemplo:**  
```javascript
function sumar(a, b) {
    return a + b;
}

console.log(sumar(3, 5)); // 8
```

---

##### **4.2.2. Funciones anónimas**  
No tienen un nombre definido y suelen asignarse a variables o pasarse como argumentos.

**Ejemplo:**  
```javascript
const multiplicar = function (a, b) {
    return a * b;
};

console.log(multiplicar(4, 7)); // 28
```

---

##### **4.2.3. Funciones flecha (Arrow Functions)**  
Introducidas en ES6, son una forma más concisa de definir funciones.  
**Sintaxis:**  
```javascript
const nombreFuncion = (parametros) => {
    // Código
};
```

**Ejemplo:**  
```javascript
const restar = (a, b) => a - b;

console.log(restar(10, 4)); // 6
```

---

##### **4.2.4. Funciones autoejecutables (IIFE)**  
Se ejecutan automáticamente al ser definidas. Se envuelven en paréntesis.  
**Ejemplo:**  
```javascript
(function () {
    console.log("Esto es una función autoejecutable.");
})();
```

---

#### **4.3. Parámetros y argumentos**

1. **Parámetros predeterminados:**  
   Puedes asignar valores predeterminados a los parámetros.  
   ```javascript
   function saludar(nombre = "Usuario") {
       return "Hola, " + nombre + "!";
   }

   console.log(saludar());       // "Hola, Usuario!"
   console.log(saludar("Ana")); // "Hola, Ana!"
   ```

2. **Parámetros Rest (`...`)**:  
   Agrupan varios argumentos en un solo array.  
   ```javascript
   function sumarTodo(...numeros) {
       return numeros.reduce((a, b) => a + b, 0);
   }

   console.log(sumarTodo(1, 2, 3, 4)); // 10
   ```

---

#### **4.4. Ámbito (Scope) de las variables**

1. **Ámbito global:**  
   Variables accesibles desde cualquier lugar del código.  
   ```javascript
   let global = "Soy global";

   function mostrarGlobal() {
       console.log(global); // "Soy global"
   }

   mostrarGlobal();
   ```

2. **Ámbito local:**  
   Variables definidas dentro de una función.  
   ```javascript
   function mostrarLocal() {
       let local = "Soy local";
       console.log(local); // "Soy local"
   }

   mostrarLocal();
   // console.log(local); // Error: local no está definida
   ```

3. **Closures (Cierres):**  
   Una función puede recordar el entorno en el que fue creada.  
   ```javascript
   function crearContador() {
       let contador = 0;
       return function () {
           contador++;
           return contador;
       };
   }

   const contador = crearContador();
   console.log(contador()); // 1
   console.log(contador()); // 2
   ```

---

#### **4.5. Funciones como valores y callbacks**

1. **Funciones como valores:**  
   Las funciones pueden asignarse a variables y pasarse como argumentos.  
   ```javascript
   const saludar = function (nombre) {
       return "Hola, " + nombre;
   };

   console.log(saludar("Ana")); // "Hola, Ana"
   ```

2. **Funciones de callback:**  
   Una función que se pasa como argumento y se ejecuta después de otra.  
   ```javascript
   function procesarUsuario(nombre, callback) {
       console.log("Procesando usuario...");
       callback(nombre);
   }

   function saludarUsuario(nombre) {
       console.log("Hola, " + nombre + "!");
   }

   procesarUsuario("Juan", saludarUsuario);
   ```

---

#### **4.6. Funciones de orden superior**

Son funciones que reciben otra función como argumento o devuelven una función.  

**Ejemplo:**  
```javascript
function aplicarOperacion(a, b, operacion) {
    return operacion(a, b);
}

const suma = (x, y) => x + y;
const multiplicacion = (x, y) => x * y;

console.log(aplicarOperacion(3, 5, suma));          // 8
console.log(aplicarOperacion(3, 5, multiplicacion)); // 15
```

---

#### **4.7. Ejercicios prácticos**

1. Escribe una función llamada `calcularAreaCirculo` que reciba el radio como parámetro y devuelva el área del círculo. Usa la fórmula:  
   \[
   \text{Área} = \pi \cdot r^2
   \]

2. Crea una función llamada `esPar` que reciba un número como parámetro y devuelva `true` si es par, o `false` si es impar.  

3. Escribe una función llamada `ordenarArray` que reciba un array de números y un callback que determine si se debe ordenar de forma ascendente o descendente.  

**Ejemplo:**  
```javascript
ordenarArray([3, 1, 4, 1], (a, b) => a - b); // [1, 1, 3, 4]
ordenarArray([3, 1, 4, 1], (a, b) => b - a); // [4, 3, 1, 1]
```

---

¿Te gustaría que detalle más ejercicios o profundice en un aspecto en particular? 😊