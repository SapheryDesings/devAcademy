Aquí tienes el desarrollo del **Tema 10: Asincronía en JavaScript**:

---

### **10. Asincronía en JavaScript**

La asincronía en JavaScript es un concepto crucial para manejar tareas que no se completan inmediatamente, como solicitudes HTTP, operaciones de lectura y escritura de archivos, o temporizadores. JavaScript es un lenguaje de un solo hilo, lo que significa que solo puede ejecutar una tarea a la vez. Sin embargo, con la asincronía, puedes realizar múltiples tareas simultáneamente sin bloquear el flujo principal de ejecución del código.

---

#### **10.1. Conceptos Básicos de Asincronía**

En JavaScript, las operaciones asincrónicas permiten que ciertas funciones se ejecuten sin bloquear el resto del programa. Esto se logra usando **callbacks**, **promesas** y **async/await**.

**Ejemplo básico de asincronía con `setTimeout`:**
```javascript
console.log("Inicio");

setTimeout(() => {
    console.log("Esto se ejecuta después de 2 segundos");
}, 2000);

console.log("Fin");
```

**Salida:**
```
Inicio
Fin
Esto se ejecuta después de 2 segundos
```

En este ejemplo, aunque el `setTimeout` se programa para ejecutarse después de 2 segundos, el flujo de ejecución continúa con la línea `console.log("Fin")`, lo que muestra que JavaScript no se bloqueó esperando.

---

#### **10.2. Callbacks (Funciones de Retorno)**

Un **callback** es una función que se pasa como argumento a otra función y que se ejecuta cuando una tarea asincrónica se completa.

**Ejemplo con callback:**
```javascript
function tareaAsincrona(callback) {
    setTimeout(() => {
        console.log("Tarea completada");
        callback();
    }, 2000);
}

tareaAsincrona(() => {
    console.log("Callback ejecutado");
});
```

**Salida:**
```
Tarea completada
Callback ejecutado
```

En este ejemplo, la función `tareaAsincrona` acepta un callback que se ejecuta una vez que la tarea asincrónica se ha completado.

---

#### **10.3. Promesas (Promises)**

Una **promesa** es un objeto que representa el resultado final de una operación asincrónica. Puede estar en tres estados:
- **Pendiente** (`pending`): La operación aún no se ha completado.
- **Cumplida** (`fulfilled`): La operación se completó con éxito.
- **Rechazada** (`rejected`): La operación falló.

**Ejemplo de Promesa:**
```javascript
let promesa = new Promise((resolve, reject) => {
    let exito = true;
    if (exito) {
        resolve("Operación exitosa");
    } else {
        reject("Hubo un error");
    }
});

promesa
    .then(result => console.log(result))  // Si la promesa se cumple
    .catch(error => console.log(error));  // Si la promesa es rechazada
```

**Salida:**
```
Operación exitosa
```

En este ejemplo, si la condición `exito` es `true`, la promesa se resuelve con el mensaje `"Operación exitosa"`. Si `exito` fuera `false`, se rechazaría la promesa y se ejecutaría el bloque `catch`.

---

#### **10.4. Encadenamiento de Promesas**

Puedes encadenar varias promesas usando `.then()` y `.catch()` para manejar flujos asincrónicos más complejos.

**Ejemplo de encadenamiento de promesas:**
```javascript
function obtenerDatos() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Datos obtenidos");
        }, 1000);
    });
}

function procesarDatos(datos) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(`${datos} y procesados`);
        }, 1000);
    });
}

obtenerDatos()
    .then(datos => {
        console.log(datos); // "Datos obtenidos"
        return procesarDatos(datos);  // Pasamos datos a la siguiente promesa
    })
    .then(result => console.log(result))  // "Datos obtenidos y procesados"
    .catch(error => console.log(error));
```

**Salida:**
```
Datos obtenidos
Datos obtenidos y procesados
```

En este ejemplo, las promesas se encadenan para que la función `procesarDatos` se ejecute después de que `obtenerDatos` haya sido resuelta.

---

#### **10.5. Async/Await**

**`async/await`** es una forma más moderna y legible de trabajar con código asincrónico en JavaScript. Con `async`, una función retorna automáticamente una promesa, y con `await`, podemos esperar a que una promesa se resuelva antes de continuar con la ejecución del código.

**Ejemplo con async/await:**
```javascript
async function obtenerDatos() {
    return "Datos obtenidos";
}

async function mostrarDatos() {
    let datos = await obtenerDatos();  // Esperamos a que la promesa se resuelva
    console.log(datos);
}

mostrarDatos();
```

**Salida:**
```
Datos obtenidos
```

En este ejemplo, `await` hace que la ejecución de `mostrarDatos` se pause hasta que `obtenerDatos` se resuelva.

---

#### **10.6. Manejo de Errores con Async/Await**

Puedes manejar errores en funciones `async` utilizando `try...catch`.

**Ejemplo de manejo de errores con `async/await`:**
```javascript
async function obtenerDatos() {
    throw new Error("Error en la obtención de datos");
}

async function mostrarDatos() {
    try {
        let datos = await obtenerDatos();  // Esperamos a que la promesa se resuelva
        console.log(datos);
    } catch (error) {
        console.log("Error:", error.message);
    }
}

mostrarDatos();
```

**Salida:**
```
Error: Error en la obtención de datos
```

Aquí, si ocurre un error dentro de la función `obtenerDatos`, el bloque `catch` captura el error y lo maneja de manera adecuada.

---

#### **10.7. Métodos Adicionales de Promesas**

1. **`Promise.all()`**
   Permite ejecutar varias promesas en paralelo y esperar a que todas se resuelvan antes de continuar.

   **Ejemplo:**
   ```javascript
   let promesa1 = new Promise(resolve => setTimeout(resolve, 1000, "Primer resultado"));
   let promesa2 = new Promise(resolve => setTimeout(resolve, 2000, "Segundo resultado"));

   Promise.all([promesa1, promesa2])
       .then(resultados => console.log(resultados));  // ["Primer resultado", "Segundo resultado"]
   ```

2. **`Promise.race()`**
   Ejecuta varias promesas en paralelo, pero se resuelve con la primera que termine.

   **Ejemplo:**
   ```javascript
   let promesa1 = new Promise(resolve => setTimeout(resolve, 1000, "Primer resultado"));
   let promesa2 = new Promise(resolve => setTimeout(resolve, 2000, "Segundo resultado"));

   Promise.race([promesa1, promesa2])
       .then(resultado => console.log(resultado));  // "Primer resultado"
   ```

---

#### **10.8. Ejercicios Prácticos**

1. **Simular una solicitud HTTP asincrónica**:
   Crea una función que simule una solicitud HTTP usando `setTimeout` y resuelva o rechace la promesa dependiendo de un valor aleatorio.

   **Ejemplo:**
   ```javascript
   function hacerSolicitud() {
       return new Promise((resolve, reject) => {
           setTimeout(() => {
               let exito = Math.random() > 0.5;
               if (exito) {
                   resolve("Solicitud exitosa");
               } else {
                   reject("Error en la solicitud");
               }
           }, 1000);
       });
   }

   hacerSolicitud()
       .then(respuesta => console.log(respuesta))
       .catch(error => console.log(error));
   ```

2. **Simular múltiples operaciones asincrónicas con `Promise.all`**:
   Crea tres promesas que simulen operaciones asincrónicas y usa `Promise.all` para ejecutarlas en paralelo y mostrar sus resultados.

   **Ejemplo:**
   ```javascript
   function operacion1() {
       return new Promise(resolve => setTimeout(resolve, 500, "Operación 1 completada"));
   }

   function operacion2() {
       return new Promise(resolve => setTimeout(resolve, 1000, "Operación 2 completada"));
   }

   function operacion3() {
       return new Promise(resolve => setTimeout(resolve, 1500, "Operación 3 completada"));
   }

   Promise.all([operacion1(), operacion2(), operacion3()])
       .then(resultados => console.log(resultados));
   ```

---

¿Te gustaría más detalles sobre algún aspecto de la asincronía o algún ejercicio adicional? 😊g