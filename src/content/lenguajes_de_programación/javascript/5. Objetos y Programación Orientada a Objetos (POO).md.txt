Aqu√≠ tienes el desarrollo del **Tema 5: Objetos y Programaci√≥n Orientada a Objetos (POO) en JavaScript**:

---

### **5. Objetos y Programaci√≥n Orientada a Objetos (POO)**

JavaScript es un lenguaje basado en objetos, lo que significa que los objetos son fundamentales para organizar datos y comportamientos. La Programaci√≥n Orientada a Objetos (POO) permite estructurar el c√≥digo de forma modular y reutilizable.

---

#### **5.1. ¬øQu√© es un objeto?**

Un objeto es una colecci√≥n de propiedades y m√©todos (funciones asociadas).  
**Sintaxis b√°sica:**  
```javascript
let objeto = {
    propiedad1: valor1,
    propiedad2: valor2,
    metodo1: function () {
        // C√≥digo
    }
};
```

**Ejemplo:**  
```javascript
let persona = {
    nombre: "Juan",
    edad: 30,
    saludar: function () {
        console.log("Hola, mi nombre es " + this.nombre);
    }
};

console.log(persona.nombre); // "Juan"
persona.saludar();          // "Hola, mi nombre es Juan"
```

---

#### **5.2. Creaci√≥n de objetos**

##### **5.2.1. Objeto literal**  
La forma m√°s sencilla de crear un objeto.  
```javascript
let coche = {
    marca: "Toyota",
    modelo: "Corolla",
    encender: function () {
        console.log("El coche est√° encendido.");
    }
};
```

---

##### **5.2.2. Objeto con `new Object()`**  
Otra forma de crear un objeto, menos com√∫n.  
```javascript
let libro = new Object();
libro.titulo = "JavaScript B√°sico";
libro.autor = "An√≥nimo";
libro.leer = function () {
    console.log("Leyendo " + this.titulo);
};
```

---

##### **5.2.3. Constructores de objetos**  
Permiten crear varios objetos con la misma estructura.  
**Ejemplo:**  
```javascript
function Persona(nombre, edad) {
    this.nombre = nombre;
    this.edad = edad;
    this.saludar = function () {
        console.log("Hola, soy " + this.nombre);
    };
}

let persona1 = new Persona("Ana", 25);
let persona2 = new Persona("Luis", 35);

persona1.saludar(); // "Hola, soy Ana"
persona2.saludar(); // "Hola, soy Luis"
```

---

#### **5.3. M√©todos y propiedades de los objetos**

##### **5.3.1. M√©todos de los objetos**  
Los m√©todos son funciones dentro de los objetos que pueden operar sobre sus propiedades.  

**Ejemplo:**  
```javascript
let calculadora = {
    sumar: function (a, b) {
        return a + b;
    },
    restar: function (a, b) {
        return a - b;
    }
};

console.log(calculadora.sumar(5, 3)); // 8
console.log(calculadora.restar(5, 3)); // 2
```

---

##### **5.3.2. Acceso a propiedades y m√©todos**  
1. **Notaci√≥n de punto:**  
   ```javascript
   console.log(persona.nombre);
   persona.saludar();
   ```

2. **Notaci√≥n de corchetes:**  
   ```javascript
   console.log(persona["nombre"]);
   ```

---

#### **5.4. POO en JavaScript**

##### **5.4.1. Clases**  
Las clases son una forma moderna de definir objetos en JavaScript (introducidas en ES6).  

**Ejemplo b√°sico de clase:**  
```javascript
class Animal {
    constructor(nombre, tipo) {
        this.nombre = nombre;
        this.tipo = tipo;
    }

    describir() {
        console.log(`Este es un ${this.tipo} llamado ${this.nombre}.`);
    }
}

let perro = new Animal("Rex", "perro");
perro.describir(); // "Este es un perro llamado Rex."
```

---

##### **5.4.2. Herencia**  
Permite que una clase herede propiedades y m√©todos de otra clase.  

**Ejemplo:**  
```javascript
class Animal {
    constructor(nombre) {
        this.nombre = nombre;
    }

    hablar() {
        console.log(this.nombre + " hace un ruido.");
    }
}

class Perro extends Animal {
    hablar() {
        console.log(this.nombre + " ladra.");
    }
}

let perro = new Perro("Rex");
perro.hablar(); // "Rex ladra."
```

---

##### **5.4.3. Encapsulaci√≥n**  
Esconde detalles internos del objeto mediante propiedades privadas y p√∫blicas.  
**Ejemplo:**  
```javascript
class CuentaBancaria {
    #saldo; // Propiedad privada

    constructor(saldoInicial) {
        this.#saldo = saldoInicial;
    }

    depositar(cantidad) {
        this.#saldo += cantidad;
    }

    obtenerSaldo() {
        return this.#saldo;
    }
}

let cuenta = new CuentaBancaria(1000);
cuenta.depositar(500);
console.log(cuenta.obtenerSaldo()); // 1500
// console.log(cuenta.#saldo); // Error: Propiedad privada
```

---

##### **5.4.4. Polimorfismo**  
Permite que m√©todos con el mismo nombre act√∫en de manera diferente seg√∫n la clase.  

**Ejemplo:**  
```javascript
class Vehiculo {
    conducir() {
        console.log("Conduciendo un veh√≠culo gen√©rico.");
    }
}

class Coche extends Vehiculo {
    conducir() {
        console.log("Conduciendo un coche.");
    }
}

let vehiculo = new Vehiculo();
let coche = new Coche();

vehiculo.conducir(); // "Conduciendo un veh√≠culo gen√©rico."
coche.conducir();    // "Conduciendo un coche."
```

---

#### **5.5. Ejercicios pr√°cticos**

1. Crea un objeto literal llamado `persona` con propiedades `nombre`, `edad` y un m√©todo `presentarse` que imprima `"Hola, soy <nombre> y tengo <edad> a√±os."`.  

2. Define una clase `Rectangulo` con propiedades `base` y `altura` y un m√©todo `calcularArea`. Crea una instancia de `Rectangulo` y calcula el √°rea.

3. Implementa una jerarqu√≠a de clases donde una clase `Animal` sea la base, y `Gato` y `Perro` hereden de ella. Define un m√©todo `hacerSonido` en cada clase derivada.  

---

¬øTe gustar√≠a que detalle m√°s conceptos, a√±ada ejercicios adicionales o profundice en un aspecto espec√≠fico? üòä