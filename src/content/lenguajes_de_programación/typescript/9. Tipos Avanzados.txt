### **9. Tipos Avanzados en TypeScript**

TypeScript, al ser un lenguaje de tipado estático, permite definir tipos de datos con una precisión que ayuda a detectar errores en tiempo de compilación. A lo largo de su uso, se pueden encontrar situaciones donde los tipos básicos no son suficientes, por lo que TypeScript ofrece tipos avanzados que permiten una mayor flexibilidad y robustez en la tipificación de las variables, funciones y objetos.

En este tema, exploraremos algunos de los tipos avanzados más importantes que TypeScript proporciona, como los **tipos unión**, **tipos intersección**, **tipos literales**, **tipos condicionales**, **tipos mapeados** y **tipos de inferencia**.

---

#### **9.1. Tipos de Unión (Union Types)**

Los **tipos de unión** permiten a una variable ser de uno de varios tipos. Esto se consigue usando el operador `|` para combinar varios tipos. Esta característica es muy útil cuando se quiere que una variable pueda tomar uno de varios valores posibles.

**Sintaxis de unión de tipos:**

```typescript
let variable: tipo1 | tipo2;
```

**Ejemplo de tipos de unión:**

```typescript
let id: number | string;

id = 42;        // Correcto
id = "abc123";  // Correcto
// id = true;   // Error: el tipo boolean no es asignable a 'number | string'
```

En este caso, la variable `id` puede ser de tipo `number` o `string`, permitiendo mayor flexibilidad en los valores que puede almacenar.

---

#### **9.2. Tipos de Intersección (Intersection Types)**

Los **tipos de intersección** permiten combinar varios tipos en uno solo, y un valor de un tipo de intersección debe cumplir con todos los tipos involucrados. Esto se realiza utilizando el operador `&`.

**Sintaxis de intersección de tipos:**

```typescript
let variable: tipo1 & tipo2;
```

**Ejemplo de tipos de intersección:**

```typescript
interface Persona {
  nombre: string;
  edad: number;
}

interface Estudiante {
  curso: string;
}

let estudiante: Persona & Estudiante = {
  nombre: "Ana",
  edad: 22,
  curso: "Matemáticas"
};

console.log(estudiante);  // { nombre: "Ana", edad: 22, curso: "Matemáticas" }
```

En este caso, la variable `estudiante` debe tener todas las propiedades definidas tanto en `Persona` como en `Estudiante`, lo que permite combinar las características de ambos tipos.

---

#### **9.3. Tipos Literales (Literal Types)**

Los **tipos literales** permiten restringir el valor de una variable a un conjunto específico de valores literales, lo que proporciona una mayor precisión al definir el tipo de una variable.

**Sintaxis de tipos literales:**

```typescript
let variable: "valor1" | "valor2" | "valor3";
```

**Ejemplo de tipos literales:**

```typescript
let estado: "activo" | "inactivo" | "pendiente";

estado = "activo";    // Correcto
estado = "inactivo";  // Correcto
// estado = "completo"; // Error: el valor "completo" no es parte de los valores posibles
```

En este ejemplo, la variable `estado` solo puede ser uno de los valores literales `"activo"`, `"inactivo"`, o `"pendiente"`, lo que limita los posibles valores que puede tomar.

---

#### **9.4. Tipos Condicionales (Conditional Types)**

Los **tipos condicionales** permiten elegir entre dos tipos dependiendo de una condición. Esto se hace utilizando la sintaxis condicional `T extends U ? X : Y`, donde `T` es el tipo que se verifica, `U` es el tipo que se compara, `X` es el tipo que se toma si la condición se cumple y `Y` es el tipo que se toma si no se cumple.

**Sintaxis de tipos condicionales:**

```typescript
T extends U ? X : Y
```

**Ejemplo de tipos condicionales:**

```typescript
type EsString<T> = T extends string ? "Es un string" : "No es un string";

let resultado1: EsString<string> = "Es un string";    // Correcto
let resultado2: EsString<number> = "No es un string";  // Correcto
// let resultado3: EsString<boolean> = "Es un string"; // Error: no es un string
```

En este ejemplo, el tipo `EsString<T>` evalúa si el tipo `T` es un `string` y, dependiendo del resultado, asigna el valor `"Es un string"` o `"No es un string"`.

---

#### **9.5. Tipos Mapeados (Mapped Types)**

Los **tipos mapeados** permiten transformar un tipo existente en otro tipo, aplicando una operación a cada propiedad de un tipo. Esto se logra usando el operador `keyof` y un bucle sobre las propiedades de un tipo.

**Sintaxis de tipos mapeados:**

```typescript
type NuevoTipo<T> = {
  [K in keyof T]: tipoNuevo;
}
```

**Ejemplo de tipos mapeados:**

```typescript
interface Persona {
  nombre: string;
  edad: number;
}

type PersonaReadonly = {
  readonly [K in keyof Persona]: Persona[K];
};

const personaReadonly: PersonaReadonly = {
  nombre: "Juan",
  edad: 30
};

// personaReadonly.nombre = "Ana";  // Error: no se puede modificar porque es readonly
```

En este caso, `PersonaReadonly` es un tipo mapeado que convierte todas las propiedades de `Persona` en propiedades de solo lectura (usando `readonly`), lo que significa que no se pueden modificar después de ser asignadas.

---

#### **9.6. Tipos de Funciones Avanzados**

TypeScript también permite definir tipos avanzados para funciones, proporcionando una forma más precisa de definir las firmas de las funciones, los parámetros y los tipos de retorno.

**Ejemplo de tipos de funciones avanzados:**

```typescript
type FuncionSumar = (a: number, b: number) => number;

const sumar: FuncionSumar = (a, b) => a + b;

let resultado = sumar(10, 20);  // Correcto
// resultado = sumar("10", "20"); // Error: los parámetros deben ser números
```

En este caso, `FuncionSumar` es un tipo de función que toma dos parámetros de tipo `number` y devuelve un `number`. Este tipo asegura que solo se puedan asignar funciones con esa firma exacta.

---

#### **9.7. Tipos de Inferencia**

**La inferencia de tipos** es un concepto importante en TypeScript, donde el compilador puede deducir automáticamente el tipo de una variable o expresión sin necesidad de que el programador lo declare explícitamente.

**Ejemplo de inferencia de tipos:**

```typescript
let numero = 10;  // TypeScript infiere que el tipo de `numero` es `number`

numero = "texto"; // Error: no se puede asignar un string a una variable de tipo number
```

En este ejemplo, TypeScript infiere que `numero` es de tipo `number` a partir del valor inicial. Sin embargo, si intentas asignar un valor de tipo diferente (como una cadena), TypeScript generará un error.

---

#### **9.8. Tipos de Tipo de Parámetros de Función (Rest Parameters y Spread Types)**

Los parámetros de función pueden ser flexibles con los **parámetros rest** y el **operador spread**. El parámetro rest permite que una función acepte un número variable de argumentos, y el operador spread se utiliza para expandir un tipo.

**Sintaxis de parámetros rest:**

```typescript
function sumar(...numeros: number[]): number {
  return numeros.reduce((acum, num) => acum + num, 0);
}
```

**Ejemplo de uso de parámetros rest:**

```typescript
console.log(sumar(1, 2, 3, 4));  // 10
console.log(sumar(5, 10));       // 15
```

Aquí, el operador `...numeros` permite que la función `sumar` acepte cualquier número de parámetros de tipo `number`.

---

#### **9.9. Conclusión**

Los **tipos avanzados** en TypeScript proporcionan una gran flexibilidad y poder para los desarrolladores al definir tipos de manera precisa y robusta. Desde tipos de unión e intersección hasta tipos condicionales, mapeados y literales, TypeScript ofrece herramientas potentes para trabajar con estructuras de datos complejas y garantizar un código seguro y mantenible. El uso adecuado de estos tipos avanzados mejora la calidad del código, permite detectar errores en tiempo de compilación y facilita la creación de aplicaciones grandes y escalables.