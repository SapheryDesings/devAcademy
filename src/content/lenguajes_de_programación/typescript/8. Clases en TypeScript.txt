### **8. Clases en TypeScript**

Las **clases** en TypeScript son una forma estructurada y modular de definir objetos y sus comportamientos. Se basan en el concepto de la programación orientada a objetos (POO) y proporcionan una forma de agrupar propiedades y métodos que están relacionados con un objeto. TypeScript amplía las clases de JavaScript al añadir tipado estático, lo que garantiza que las instancias de las clases y sus miembros sean correctos y consistentes según los tipos definidos.

A continuación, exploraremos cómo se definen las clases en TypeScript, cómo se utilizan, y algunas características avanzadas relacionadas con ellas.

---

#### **8.1. Definición Básica de una Clase**

En TypeScript, una clase se define utilizando la palabra clave `class`, seguida de su nombre, y dentro de ella se pueden declarar propiedades (también conocidas como campos) y métodos. Las propiedades y métodos pueden tener tipos explícitos, lo que ayuda a detectar errores en tiempo de compilación.

**Sintaxis básica de una clase:**

```typescript
class NombreDeLaClase {
  propiedad1: tipo1;
  propiedad2: tipo2;

  constructor(param1: tipo1, param2: tipo2) {
    this.propiedad1 = param1;
    this.propiedad2 = param2;
  }

  metodo(): tipoDeRetorno {
    // Implementación del método
  }
}
```

**Ejemplo de clase básica:**

```typescript
class Persona {
  nombre: string;
  edad: number;

  constructor(nombre: string, edad: number) {
    this.nombre = nombre;
    this.edad = edad;
  }

  saludar(): string {
    return `Hola, soy ${this.nombre} y tengo ${this.edad} años.`;
  }
}

const persona = new Persona("Juan", 30);
console.log(persona.saludar());  // "Hola, soy Juan y tengo 30 años."
```

En este ejemplo, hemos creado una clase `Persona` que tiene dos propiedades (`nombre` y `edad`) y un método `saludar`. La clase también tiene un constructor que inicializa las propiedades.

---

#### **8.2. Modificadores de Acceso: `public`, `private`, y `protected`**

En TypeScript, puedes controlar la visibilidad de las propiedades y métodos de una clase mediante los modificadores de acceso `public`, `private` y `protected`.

- **`public`**: Las propiedades y métodos son accesibles desde cualquier lugar, tanto dentro de la clase como desde fuera.
- **`private`**: Las propiedades y métodos solo son accesibles dentro de la clase en la que se definen. No pueden ser accedidos desde fuera.
- **`protected`**: Las propiedades y métodos son accesibles dentro de la clase y sus subclases, pero no fuera de ellas.

**Ejemplo de modificadores de acceso:**

```typescript
class Persona {
  public nombre: string;
  private edad: number;

  constructor(nombre: string, edad: number) {
    this.nombre = nombre;
    this.edad = edad;
  }

  public saludar(): string {
    return `Hola, soy ${this.nombre} y tengo ${this.edad} años.`;
  }

  private mostrarEdad(): number {
    return this.edad;
  }
}

const persona = new Persona("Juan", 30);
console.log(persona.saludar());  // "Hola, soy Juan y tengo 30 años."
// console.log(persona.mostrarEdad());  // Error: el método "mostrarEdad" es privado.
```

En este ejemplo, `nombre` es público, por lo que puede accederse desde fuera de la clase, mientras que `edad` y el método `mostrarEdad` son privados y no se pueden acceder directamente desde fuera de la clase.

---

#### **8.3. Herencia en TypeScript**

TypeScript permite la herencia, lo que significa que una clase puede extender a otra y heredar sus propiedades y métodos. Esto se logra utilizando la palabra clave `extends`. Las clases hijas pueden agregar sus propias propiedades y métodos, o bien sobrescribir (overriding) los métodos heredados de la clase base.

**Sintaxis de herencia:**

```typescript
class ClaseBase {
  propiedad1: tipo1;

  constructor(param1: tipo1) {
    this.propiedad1 = param1;
  }

  metodo(): tipoDeRetorno {
    // Implementación
  }
}

class ClaseHija extends ClaseBase {
  propiedad2: tipo2;

  constructor(param1: tipo1, param2: tipo2) {
    super(param1);  // Llamada al constructor de la clase base
    this.propiedad2 = param2;
  }

  metodoHijo(): tipoDeRetorno {
    // Implementación adicional
  }
}
```

**Ejemplo de herencia:**

```typescript
class Animal {
  nombre: string;

  constructor(nombre: string) {
    this.nombre = nombre;
  }

  hacerSonido(): string {
    return `${this.nombre} hace un sonido.`;
  }
}

class Perro extends Animal {
  raza: string;

  constructor(nombre: string, raza: string) {
    super(nombre);  // Llama al constructor de la clase base
    this.raza = raza;
  }

  hacerSonido(): string {
    return `${this.nombre} dice: ¡Guau!`;
  }
}

const miPerro = new Perro("Rex", "Labrador");
console.log(miPerro.hacerSonido());  // "Rex dice: ¡Guau!"
```

En este ejemplo, la clase `Perro` extiende a la clase `Animal` y sobrescribe el método `hacerSonido`. Esto muestra cómo se puede extender una clase base y agregar o modificar el comportamiento en una clase hija.

---

#### **8.4. Métodos Estáticos**

En TypeScript, los métodos estáticos pertenecen a la clase misma y no a las instancias de la clase. Esto significa que puedes llamar a un método estático sin tener que crear una instancia de la clase.

**Sintaxis de métodos estáticos:**

```typescript
class NombreDeLaClase {
  static metodoEstático(): tipoDeRetorno {
    // Implementación
  }
}
```

**Ejemplo de método estático:**

```typescript
class Matematica {
  static sumar(a: number, b: number): number {
    return a + b;
  }
}

console.log(Matematica.sumar(5, 10));  // 15
```

En este caso, el método `sumar` es estático, lo que significa que se puede llamar directamente en la clase sin necesidad de crear una instancia de la clase.

---

#### **8.5. Métodos Getters y Setters**

Los **getters** y **setters** permiten acceder a las propiedades de una clase de manera controlada. Estos métodos actúan como intermediarios entre la propiedad y el código que la utiliza.

- **`get`**: Define un método que se ejecuta cuando se accede a una propiedad.
- **`set`**: Define un método que se ejecuta cuando se asigna un valor a una propiedad.

**Sintaxis de getters y setters:**

```typescript
class NombreDeLaClase {
  private _propiedad: tipo;

  get propiedad(): tipo {
    return this._propiedad;
  }

  set propiedad(valor: tipo) {
    this._propiedad = valor;
  }
}
```

**Ejemplo de getters y setters:**

```typescript
class Persona {
  private _nombre: string;

  constructor(nombre: string) {
    this._nombre = nombre;
  }

  get nombre(): string {
    return this._nombre;
  }

  set nombre(nuevoNombre: string) {
    this._nombre = nuevoNombre;
  }
}

const persona = new Persona("Juan");
console.log(persona.nombre);  // "Juan"

persona.nombre = "Ana";
console.log(persona.nombre);  // "Ana"
```

En este ejemplo, la propiedad `nombre` está protegida por un getter y un setter, lo que permite controlar cómo se obtiene y se establece el valor de `_nombre`.

---

#### **8.6. Clases Abstractas**

Las **clases abstractas** son clases que no pueden ser instanciadas directamente. Se utilizan como base para otras clases que implementan sus métodos abstractos. Una clase abstracta puede contener métodos concretos (con implementación) y métodos abstractos (sin implementación).

**Sintaxis de clases abstractas:**

```typescript
abstract class NombreDeLaClase {
  abstract metodoAbstracto(): tipoDeRetorno;
  
  metodoConcreto(): tipoDeRetorno {
    // Implementación
  }
}
```

**Ejemplo de clase abstracta:**

```typescript
abstract class Animal {
  abstract hacerSonido(): string;

  dormir(): string {
    return "Durmiendo...";
  }
}

class Perro extends Animal {
  hacerSonido(): string {
    return "¡Guau!";
  }
}

const perro = new Perro();
console.log(perro.hacerSonido());  // "¡Guau!"
console.log(perro.dormir());      // "Durmiendo..."
```

En este caso, la clase `Animal` es abstracta y tiene un método abstracto `hacerSonido`, que debe ser implementado en las clases hijas, como en `Perro`.

---

#### **8.7. Conclusión**

Las clases en TypeScript son una herramienta poderosa que permite organizar y estructurar el código de manera más clara y mantenible. Al combinar la programación orientada a objetos con el tipado estático de TypeScript, se obtiene una mayor seguridad

 y robustez en el desarrollo de aplicaciones. Las clases permiten encapsular propiedades y métodos, heredar comportamientos, utilizar métodos estáticos, controlar el acceso a las propiedades mediante getters y setters, y trabajar con clases abstractas para definir jerarquías de objetos más flexibles y reutilizables.