### **5. Operadores en TypeScript**

Los operadores en TypeScript son símbolos o palabras clave que permiten realizar operaciones sobre variables y valores. Estos operadores son fundamentales para la manipulación de datos y la construcción de lógica en aplicaciones. TypeScript hereda todos los operadores de JavaScript, pero con la ventaja de que los tipos son verificados, lo que mejora la precisión y la seguridad en las operaciones.

A continuación, exploraremos los diferentes tipos de operadores en TypeScript, cómo se usan y cómo TypeScript gestiona la seguridad de tipos en estos operadores.

---

#### **5.1. Operadores Aritméticos**

Los operadores aritméticos se utilizan para realizar operaciones matemáticas básicas como suma, resta, multiplicación y división.

- **Suma (`+`)**: Suma dos valores.
- **Resta (`-`)**: Resta el segundo valor del primero.
- **Multiplicación (`*`)**: Multiplica dos valores.
- **División (`/`)**: Divide el primer valor por el segundo.
- **Módulo (`%`)**: Devuelve el resto de la división entre dos valores.
- **Incremento (`++`)**: Aumenta el valor de una variable en 1.
- **Decremento (`--`)**: Disminuye el valor de una variable en 1.

**Ejemplos:**

```typescript
let x: number = 5;
let y: number = 10;

let suma = x + y;      // 15
let resta = x - y;     // -5
let multiplicacion = x * y;  // 50
let division = y / x;  // 2
let modulo = y % x;    // 0

x++;  // x es ahora 6
y--;  // y es ahora 9
```

**Seguridad de tipos**:
- TypeScript verifica que los operadores aritméticos solo se apliquen a tipos compatibles, como `number`. Si intentas realizar una operación aritmética con un tipo incorrecto, TypeScript generará un error.

---

#### **5.2. Operadores de Comparación**

Los operadores de comparación se utilizan para comparar dos valores y retornar un valor booleano (`true` o `false`).

- **Igual a (`==`)**: Compara dos valores para ver si son iguales (realiza conversión de tipos si es necesario).
- **Identico a (`===`)**: Compara dos valores para ver si son iguales y también de mismo tipo (sin conversión de tipos).
- **Diferente de (`!=`)**: Compara dos valores para ver si son diferentes.
- **No Identico a (`!==`)**: Compara dos valores para ver si son diferentes en valor o tipo.
- **Mayor que (`>`)**: Verifica si el valor de la izquierda es mayor que el de la derecha.
- **Menor que (`<`)**: Verifica si el valor de la izquierda es menor que el de la derecha.
- **Mayor o igual que (`>=`)**: Verifica si el valor de la izquierda es mayor o igual que el de la derecha.
- **Menor o igual que (`<=`)**: Verifica si el valor de la izquierda es menor o igual que el de la derecha.

**Ejemplos:**

```typescript
let a: number = 5;
let b: number = 10;

let esIgual = a == b;        // false
let esIdentico = a === b;    // false
let esDiferente = a != b;    // true
let esMayorQue = a > b;      // false
let esMenorQue = a < b;      // true
```

**Seguridad de tipos**:
- En TypeScript, se recomienda utilizar `===` (estricta) en lugar de `==` (igualdad abstracta) para evitar problemas de conversión implícita de tipos. De esta forma, TypeScript te ayudará a evitar comparaciones indeseadas entre tipos incompatibles.

---

#### **5.3. Operadores Lógicos**

Los operadores lógicos se utilizan para realizar operaciones de lógica booleana. Estos operadores devuelven `true` o `false` dependiendo de las condiciones evaluadas.

- **AND lógico (`&&`)**: Devuelve `true` si ambas expresiones son verdaderas.
- **OR lógico (`||`)**: Devuelve `true` si al menos una de las expresiones es verdadera.
- **NOT lógico (`!`)**: Invierte el valor de una expresión booleana (de `true` a `false` y viceversa).

**Ejemplos:**

```typescript
let x: boolean = true;
let y: boolean = false;

let and = x && y;   // false
let or = x || y;    // true
let not = !x;       // false
```

**Seguridad de tipos**:
- TypeScript realiza comprobaciones de tipos en expresiones booleanas, lo que significa que solo puedes usar operadores lógicos con valores de tipo `boolean` o con valores que sean convertibles a booleanos (como `true`, `false`, `0`, `1`, etc.).

---

#### **5.4. Operadores de Asignación**

Los operadores de asignación se utilizan para asignar valores a las variables. TypeScript admite tanto los operadores tradicionales como los compuestos, que combinan la asignación con una operación.

- **Asignación simple (`=`)**: Asigna un valor a una variable.
- **Asignación de suma (`+=`)**: Suma el valor de la derecha al valor de la izquierda y asigna el resultado a la izquierda.
- **Asignación de resta (`-=`)**: Resta el valor de la derecha al valor de la izquierda y asigna el resultado a la izquierda.
- **Asignación de multiplicación (`*=`)**: Multiplica el valor de la derecha por el valor de la izquierda y asigna el resultado a la izquierda.
- **Asignación de división (`/=`)**: Divide el valor de la izquierda por el valor de la derecha y asigna el resultado a la izquierda.
- **Asignación de módulo (`%=`)**: Realiza la operación de módulo entre el valor de la izquierda y el valor de la derecha, y asigna el resultado a la izquierda.

**Ejemplos:**

```typescript
let a: number = 5;
a += 3;  // a = a + 3, ahora a = 8
a -= 2;  // a = a - 2, ahora a = 6
a *= 2;  // a = a * 2, ahora a = 12
a /= 3;  // a = a / 3, ahora a = 4
a %= 3;  // a = a % 3, ahora a = 1
```

**Seguridad de tipos**:
- TypeScript garantiza que las operaciones de asignación se realicen solo con tipos compatibles. Por ejemplo, no podrás asignar un valor de tipo `string` a una variable de tipo `number` sin causar un error de tipo.

---

#### **5.5. Operadores de Tipo**

Los operadores de tipo permiten trabajar con los tipos de las variables y se utilizan principalmente en el contexto de TypeScript para realizar verificaciones de tipos en tiempo de ejecución.

- **`typeof`**: Devuelve una cadena que representa el tipo de una variable.
- **`instanceof`**: Verifica si un objeto es una instancia de una clase específica.

**Ejemplos:**

```typescript
let mensaje = "Hola, mundo";
console.log(typeof mensaje);  // "string"

class Persona {}
let persona = new Persona();
console.log(persona instanceof Persona);  // true
```

**Seguridad de tipos**:
- `typeof` es útil cuando se quiere verificar el tipo de una variable, y `instanceof` se usa para verificar si un objeto es una instancia de una clase o interfaz.

---

#### **5.6. Operadores de Unión y Tipos Literales**

- **Operador de unión (`|`)**: Permite combinar tipos, es decir, define una variable que puede ser de uno de varios tipos. Este operador se usa comúnmente con tipos literales.

```typescript
let valor: string | number;  // valor puede ser tanto string como number
valor = "Hola";
valor = 42;
```

- **Operador `&` (Intersección de tipos)**: Se utiliza para combinar múltiples tipos en un solo tipo.

```typescript
interface Persona {
  nombre: string;
  edad: number;
}

interface Empleado {
  salario: number;
}

type PersonaEmpleado = Persona & Empleado;
let empleado: PersonaEmpleado = { nombre: "Juan", edad: 30, salario: 50000 };
```

---

#### **5.7. Operadores en TypeScript y Seguridad de Tipos**

Una de las grandes ventajas de TypeScript es su sistema de tipos estático que asegura que los operadores solo se apliquen a los tipos adecuados. TypeScript proporciona verificaciones en tiempo de compilación, lo que evita errores en tiempo de ejecución y ayuda a prevenir operaciones incorrectas, como tratar de sumar un número y una cadena de texto o realizar comparaciones entre tipos incompatibles.

---

#### **5.8. Conclusión**

Los operadores en TypeScript son fundamentales para realizar operaciones en tu código. Al utilizar los operadores aritméticos, lógicos, de comparación, de asignación y de tipo, puedes manipular datos de manera efectiva y construir lógica compleja. TypeScript, al ser un lenguaje tipado estáticamente, ofrece la ventaja de verificar que estas operaciones se realicen solo con los tipos correct

os, lo que previene muchos errores comunes y mejora la fiabilidad y la mantenibilidad del código.