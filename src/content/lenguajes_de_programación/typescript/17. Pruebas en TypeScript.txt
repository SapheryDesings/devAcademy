### **17. Pruebas en TypeScript**

Las pruebas son una parte fundamental en el desarrollo de software, ya que nos permiten asegurarnos de que el código funcione como se espera, identificar errores de forma temprana y mejorar la calidad del software. En TypeScript, las pruebas se realizan de manera similar a cómo se hacen en JavaScript, pero con la ventaja del sistema de tipos de TypeScript, lo que ayuda a evitar errores en tiempo de compilación.

En este tema, exploraremos cómo realizar pruebas en TypeScript, desde la configuración de un entorno de pruebas hasta las mejores prácticas para escribir pruebas efectivas utilizando herramientas como **Jest** o **Mocha**.

---

#### **17.1. Conceptos Básicos de Pruebas**

Antes de profundizar en las herramientas y técnicas específicas, es importante entender los conceptos básicos de las pruebas de software:

1. **Pruebas Unitarias**: Las pruebas unitarias verifican que una unidad de código (por lo general, una función o método) se comporte como se espera, probando componentes individuales de manera aislada.
   
2. **Pruebas de Integración**: Verifican que varias unidades de código trabajen juntas correctamente, evaluando la interacción entre componentes del sistema.
   
3. **Pruebas de E2E (End-to-End)**: Prueban todo el sistema de forma integral, asegurando que el flujo completo de una aplicación funcione correctamente desde el principio hasta el final.

En TypeScript, las pruebas unitarias son las más comunes, y nos centramos principalmente en esta categoría. Utilizaremos frameworks y librerías que nos ayuden a escribir y ejecutar pruebas unitarias de forma efectiva.

---

#### **17.2. Herramientas de Pruebas para TypeScript**

Existen varias herramientas para realizar pruebas en TypeScript, algunas de las más populares son:

1. **Jest**: Jest es uno de los frameworks de pruebas más populares, especialmente en el entorno de React. Ofrece soporte para pruebas unitarias, de integración y de extremo a extremo.
   
2. **Mocha**: Mocha es otro framework de pruebas ampliamente utilizado, con un enfoque flexible. Se usa en conjunto con otros módulos como `Chai` (para aserciones) y `Sinon` (para espionaje, mocks y stubs).

3. **Karma**: Karma es un ejecutor de pruebas que permite ejecutar pruebas en diferentes navegadores y entornos.

4. **Chai**: Chai es una librería de aserciones utilizada generalmente con Mocha para hacer las pruebas más legibles y expresivas.

A lo largo de este tema, nos centraremos principalmente en Jest, que es fácil de configurar y usar, y también muy popular en la comunidad TypeScript.

---

#### **17.3. Configuración de Jest con TypeScript**

Para realizar pruebas en TypeScript con Jest, primero debemos configurar un entorno adecuado. A continuación, se muestra cómo instalar y configurar Jest para trabajar con TypeScript:

1. **Instalación de dependencias**:

```bash
npm install --save-dev jest ts-jest @types/jest
```

- **jest**: El marco de pruebas.
- **ts-jest**: Un preprocesador que permite que Jest ejecute archivos TypeScript.
- **@types/jest**: Los tipos de Jest para TypeScript, lo que proporciona autocompletado y validación de tipos.

2. **Configurar Jest**:

Para que Jest pueda trabajar con TypeScript, necesitamos configurar un archivo de configuración llamado `jest.config.js` (o `jest.config.ts` si estamos usando TypeScript en la configuración también).

```js
module.exports = {
  preset: 'ts-jest', // Usar ts-jest para procesar los archivos TypeScript
  testEnvironment: 'node', // Definir el entorno de ejecución de las pruebas
};
```

3. **Configurar TypeScript**:

Es posible que ya tengas un archivo `tsconfig.json` en tu proyecto, pero si no es así, crea uno para que TypeScript sepa cómo compilar el código.

```json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "CommonJS",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "strict": true
  }
}
```

Esto configura TypeScript para que funcione bien con Jest, usando módulos `CommonJS` y asegurándose de que las opciones de estricta comprobación de tipos estén habilitadas.

---

#### **17.4. Escribir Pruebas con Jest en TypeScript**

Ahora que tenemos Jest configurado, podemos comenzar a escribir pruebas para nuestras funciones y módulos en TypeScript.

1. **Prueba unitaria simple**:

Supongamos que tenemos una función que suma dos números. Escribimos una prueba para asegurarnos de que funcione correctamente.

**Código de la función (sum.ts):**

```typescript
export function suma(a: number, b: number): number {
  return a + b;
}
```

**Prueba unitaria para la función suma (sum.test.ts):**

```typescript
import { suma } from './sum';

describe('Función suma', () => {
  it('debería sumar dos números correctamente', () => {
    expect(suma(2, 3)).toBe(5);
  });
});
```

- **`describe`**: Agrupa las pruebas relacionadas. Es útil para organizar las pruebas por módulos o funcionalidades.
- **`it`**: Define una prueba individual.
- **`expect`**: Es una función de Jest que se utiliza para hacer aserciones. En este caso, usamos `toBe` para verificar que el resultado de la suma sea igual a 5.

2. **Ejecutar las pruebas**:

Para ejecutar las pruebas, podemos usar el siguiente comando:

```bash
npx jest
```

Este comando buscará todos los archivos que terminen en `.test.ts` y ejecutará las pruebas definidas en ellos.

---

#### **17.5. Aserciones en Jest**

Las aserciones son fundamentales en las pruebas, ya que nos permiten comparar los resultados obtenidos con los resultados esperados. Jest ofrece una serie de funciones de aserción que podemos usar:

- **`toBe()`**: Compara valores primitivos (como números y cadenas).
- **`toEqual()`**: Compara objetos y arrays de manera profunda.
- **`toBeTruthy()`**: Verifica que el valor no sea falsy (es decir, no sea `null`, `undefined`, `false`, etc.).
- **`toBeFalsy()`**: Verifica que el valor sea falsy.
- **`toContain()`**: Verifica que un array o string contenga un valor específico.
- **`toThrow()`**: Verifica que una función lance un error.

**Ejemplo de uso de diferentes aserciones**:

```typescript
it('debería lanzar un error cuando se pasa un argumento inválido', () => {
  expect(() => {
    suma('a', 3);  // Intentamos sumar un string con un número
  }).toThrow('Argumento inválido');
});

it('debería verificar que un array contiene un valor', () => {
  const valores = [1, 2, 3];
  expect(valores).toContain(2);  // Verifica que el array contenga el valor 2
});
```

---

#### **17.6. Mocks, Espías y Stubs**

En algunos casos, puede ser necesario simular el comportamiento de funciones, objetos o módulos externos para que nuestras pruebas sean independientes del entorno y fáciles de manejar. Jest ofrece herramientas como mocks, espías y stubs para simular comportamientos.

- **Mocks**: Simulan una función o módulo completo.
- **Espías (Spies)**: Rastrean la ejecución de una función y permiten ver cómo se ha llamado.
- **Stubs**: Sustituyen funciones o métodos por implementaciones que controlamos durante las pruebas.

**Ejemplo de uso de mocks en Jest**:

```typescript
jest.mock('./miModulo', () => ({
  obtenerDatos: jest.fn().mockReturnValue('Datos simulados'),
}));

import { obtenerDatos } from './miModulo';

it('debería usar datos simulados', () => {
  expect(obtenerDatos()).toBe('Datos simulados');
});
```

En este ejemplo, usamos `jest.mock` para simular el módulo `miModulo` y su función `obtenerDatos`.

---

#### **17.7. Pruebas Asincrónicas en TypeScript**

A menudo, nuestras funciones realizan operaciones asincrónicas, como solicitudes HTTP o acceso a bases de datos. Para probar funciones asincrónicas en Jest, podemos usar `async/await` o las funciones de Jest como `done()`.

**Ejemplo de prueba asincrónica**:

```typescript
async function obtenerDatos(): Promise<string> {
  return new Promise((resolve) => setTimeout(() => resolve('Datos obtenidos'), 1000));
}

it('debería obtener los datos correctamente', async () => {
  const datos = await obtenerDatos();
  expect(datos).toBe('Datos obtenidos');
});
```

---

#### **17.8. Cobertura de Código**

Jest también ofrece una herramienta de cobertura de código que nos permite ver qué porcentaje de nuestro código está cubierto por las pruebas.

Para generar un informe de cobertura de código, podemos ejecutar Jest con la opción `--coverage`:

```bash
npx jest --coverage
```

Esto generará un informe detallado que muestra qué líneas de código fueron ejecutadas durante las pruebas y qué partes no fueron cubiertas.

---

#### **17.9. Conclusión**

Realizar pruebas en TypeScript es un proceso fundamental

 para mantener la calidad y estabilidad del código. Al usar herramientas como **Jest**, podemos aprovechar las ventajas del sistema de tipos de TypeScript y escribir pruebas robustas y eficaces.

Las pruebas unitarias, las pruebas asincrónicas y el uso de mocks son prácticas comunes al escribir pruebas en TypeScript, y aprender a usarlas eficazmente ayudará a detectar errores a tiempo y garantizar la calidad del software.