### **15. Manejo de Errores y Excepciones en TypeScript**

El manejo de errores es una parte esencial en la programación moderna, ya que nos permite anticipar y reaccionar ante situaciones inesperadas que puedan ocurrir durante la ejecución de un programa. En TypeScript, al ser un superset de JavaScript, se utiliza el mismo enfoque para manejar errores y excepciones que en JavaScript, pero con la ventaja de contar con un sistema de tipos que puede ayudarnos a identificar y manejar errores de manera más efectiva durante la fase de desarrollo.

En este tema, exploraremos cómo TypeScript maneja los errores y excepciones, cómo usar el bloque `try...catch`, cómo trabajar con tipos de errores y cómo crear errores personalizados.

---

#### **15.1. Excepciones en TypeScript**

Las **excepciones** son situaciones en las que el programa se enfrenta a un comportamiento inesperado, como la entrada de datos incorrectos o la falta de recursos. Cuando ocurre una excepción, el flujo de control del programa se interrumpe y el control se transfiere a un bloque `catch` si se está utilizando un `try...catch`.

En TypeScript, al igual que en JavaScript, se pueden lanzar excepciones utilizando la palabra clave `throw`, y estas excepciones pueden ser de cualquier tipo, pero es una buena práctica utilizar objetos de error para representar los errores.

**Ejemplo básico de excepciones:**

```typescript
function dividir(a: number, b: number): number {
  if (b === 0) {
    throw new Error("No se puede dividir por cero");
  }
  return a / b;
}

try {
  console.log(dividir(10, 2));  // 5
  console.log(dividir(10, 0));  // Error: No se puede dividir por cero
} catch (error) {
  console.log("Error:", error.message);
}
```

En este ejemplo, la función `dividir` lanza un error cuando el divisor `b` es igual a cero. Si se llama a esta función dentro de un bloque `try`, se puede capturar el error con `catch` y manejarlo adecuadamente.

---

#### **15.2. Bloques `try...catch`**

El bloque `try...catch` en TypeScript (y en JavaScript) es la estructura básica para capturar y manejar excepciones. El código dentro del bloque `try` se ejecuta normalmente, pero si ocurre un error, la ejecución se transfiere al bloque `catch` donde se puede manejar el error.

**Sintaxis básica de `try...catch`:**

```typescript
try {
  // Código que puede lanzar un error
} catch (error) {
  // Manejo del error
}
```

Es importante tener en cuenta que el bloque `catch` puede aceptar un parámetro que contiene el error lanzado. El tipo de `error` no está especificado por defecto, por lo que puede ser de cualquier tipo. En TypeScript, es recomendable hacer una comprobación del tipo de error para asegurarse de que estamos manejando un objeto de error de manera correcta.

**Ejemplo:**

```typescript
try {
  throw new Error("Algo salió mal");
} catch (error) {
  if (error instanceof Error) {
    console.log(error.message);  // "Algo salió mal"
  }
}
```

Aquí, usamos `instanceof Error` para asegurarnos de que el objeto `error` es una instancia de la clase `Error`, lo cual nos da acceso a sus propiedades como `message` y `stack`.

---

#### **15.3. Tipos de Errores en TypeScript**

En TypeScript, los errores generalmente son objetos que contienen propiedades como `message`, `name` y `stack`. Sin embargo, como los errores pueden ser de cualquier tipo, TypeScript permite trabajar con ellos de manera flexible, aunque se recomienda ser explícito al manejar los errores.

**Error estándar:**

El tipo estándar de error en TypeScript es la clase `Error`, que proporciona una estructura básica para los errores.

```typescript
try {
  throw new Error("Un error ocurrió");
} catch (error) {
  if (error instanceof Error) {
    console.log(`Error: ${error.message}`);
  }
}
```

En este ejemplo, el error es una instancia de la clase `Error`, por lo que se puede acceder a la propiedad `message`.

**Tipos personalizados de errores:**

Es posible crear clases de error personalizadas para manejar errores más específicos. Esto es útil cuando queremos asociar más información o comportamiento a un tipo de error en particular.

**Ejemplo de clase de error personalizada:**

```typescript
class ErrorDeValidacion extends Error {
  constructor(public campo: string, message: string) {
    super(message);
    this.name = 'ErrorDeValidacion';
  }
}

function validarUsuario(nombre: string) {
  if (nombre === "") {
    throw new ErrorDeValidacion("nombre", "El nombre no puede estar vacío");
  }
}

try {
  validarUsuario("");
} catch (error) {
  if (error instanceof ErrorDeValidacion) {
    console.log(`Error en el campo ${error.campo}: ${error.message}`);
  }
}
```

En este ejemplo, hemos creado una clase `ErrorDeValidacion` que extiende la clase `Error` estándar y agrega una propiedad adicional `campo` para indicar qué campo causó el error.

---

#### **15.4. Propiedades de Error**

Los objetos de error en TypeScript (y JavaScript) pueden tener varias propiedades útiles que nos ayudan a diagnosticar problemas. Algunas de las propiedades más comunes de los errores son:

- **message**: Proporciona una descripción del error.
- **name**: El nombre de la clase de error (por defecto es "Error").
- **stack**: Una cadena que proporciona una traza del error (útil para depuración).

**Ejemplo de propiedades de error:**

```typescript
try {
  throw new Error("Algo salió mal");
} catch (error) {
  if (error instanceof Error) {
    console.log(`Nombre: ${error.name}`);  // "Error"
    console.log(`Mensaje: ${error.message}`);  // "Algo salió mal"
    console.log(`Stack: ${error.stack}`);  // Información de traza (si disponible)
  }
}
```

Aquí, el objeto `error` tiene las propiedades `name`, `message` y `stack` que nos permiten obtener más información sobre el error ocurrido.

---

#### **15.5. Uso de `finally`**

El bloque `finally` se ejecuta siempre, independientemente de si ocurrió un error o no dentro del bloque `try`. Esto es útil cuando necesitamos realizar tareas de limpieza, como cerrar conexiones a bases de datos, liberar recursos, o cualquier otra acción que deba ejecutarse sin importar el resultado del bloque `try`.

**Sintaxis de `finally`:**

```typescript
try {
  // Código que puede lanzar un error
} catch (error) {
  // Manejo del error
} finally {
  // Código que siempre se ejecutará
}
```

**Ejemplo:**

```typescript
function manejarArchivo() {
  try {
    // Intentar abrir y procesar un archivo
    throw new Error("Archivo no encontrado");
  } catch (error) {
    console.log("Error al procesar el archivo:", error.message);
  } finally {
    console.log("Cerrando archivo...");
  }
}

manejarArchivo();
```

En este caso, el mensaje `"Cerrando archivo..."` se imprimirá siempre, incluso si ocurre un error durante el procesamiento del archivo.

---

#### **15.6. Conclusión**

El manejo de errores y excepciones es una parte esencial en cualquier lenguaje de programación, y TypeScript ofrece herramientas similares a JavaScript pero con la ventaja del sistema de tipos. Con `try...catch` podemos capturar y manejar errores de manera controlada, y con `throw` podemos lanzar excepciones personalizadas.

Además, TypeScript nos permite trabajar con tipos de errores, asegurándonos de que manejemos los errores de manera segura y eficiente. Crear errores personalizados y usar propiedades como `message`, `name`, y `stack` nos ayuda a obtener una mejor trazabilidad de los errores y mejorar la experiencia de depuración. El bloque `finally` asegura que las acciones de limpieza siempre se realicen, sin importar si se ha producido un error.

En resumen, manejar correctamente los errores y excepciones en TypeScript no solo ayuda a crear aplicaciones más robustas, sino que también mejora la calidad y la mantenibilidad del código.