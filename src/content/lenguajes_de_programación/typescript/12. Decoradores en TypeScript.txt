### **12. Decoradores en TypeScript**

Los **decoradores** en TypeScript son una característica avanzada que permite agregar metadatos o modificar el comportamiento de clases, métodos, propiedades y parámetros de forma declarativa. Son una forma de aplicar patrones de diseño como el **decorador estructural** en un código que de otra manera sería más complejo. Los decoradores son muy útiles cuando se desarrollan frameworks, bibliotecas o aplicaciones que requieren una gran personalización del comportamiento sin alterar el código base.

Los decoradores permiten agregar lógica adicional a las clases, propiedades, métodos o parámetros de una manera que es más sencilla y clara que hacerlo manualmente en cada instancia.

En TypeScript, los decoradores se basan en una propuesta de **ECMAScript** y, aunque no están completamente estandarizados, son una característica comúnmente utilizada en frameworks como **Angular**. A continuación, exploraremos cómo funcionan los decoradores en TypeScript, cómo se pueden aplicar y qué tipos de decoradores existen.

---

#### **12.1. ¿Qué Son los Decoradores?**

Un **decorador** es una función que recibe información sobre el objeto que se va a decorar (una clase, un método, una propiedad, etc.) y puede modificar su comportamiento o agregarle metadatos. Los decoradores se aplican utilizando la sintaxis `@decorador` justo antes de la clase, método, propiedad o parámetro que se desea decorar.

En TypeScript, los decoradores están habilitados por defecto, pero deben ser configurados en el archivo `tsconfig.json` con la opción `experimentalDecorators` habilitada.

**Ejemplo básico de un decorador de clase:**

```typescript
function MiDecorador(target: Function) {
  console.log("Decorador ejecutado en la clase:", target);
}

@MiDecorador
class MiClase {
  constructor() {
    console.log("Instancia de MiClase creada");
  }
}

const instancia = new MiClase();  // Ejecución del decorador y creación de la instancia
```

En este ejemplo, el decorador `@MiDecorador` se aplica a la clase `MiClase`. El decorador recibe el constructor de la clase como su parámetro `target` y puede modificar su comportamiento o simplemente agregar un mensaje a la consola.

---

#### **12.2. Configuración de Decoradores en TypeScript**

Para usar decoradores en TypeScript, debes habilitar la opción `experimentalDecorators` en el archivo de configuración `tsconfig.json` de tu proyecto.

**Configuración de `tsconfig.json`:**

```json
{
  "compilerOptions": {
    "target": "es6",  // o esnext
    "experimentalDecorators": true
  }
}
```

Este ajuste permite que TypeScript reconozca y compile decoradores en el código.

---

#### **12.3. Tipos de Decoradores en TypeScript**

En TypeScript, los decoradores pueden aplicarse a diferentes elementos del código: clases, métodos, propiedades y parámetros. Cada tipo de decorador tiene una funcionalidad específica y recibe diferentes argumentos. A continuación, se describen los diferentes tipos de decoradores.

---

##### **12.3.1. Decoradores de Clases**

Un **decorador de clase** se aplica directamente a la clase y permite modificar su constructor o añadir metadatos.

**Ejemplo de decorador de clase:**

```typescript
function logClase(target: Function) {
  console.log(`Clase decorada: ${target.name}`);
}

@logClase
class Persona {
  constructor(public nombre: string, public edad: number) {}
}

const p = new Persona('Juan', 30);  // "Clase decorada: Persona"
```

En este caso, el decorador `logClase` recibe el constructor de la clase `Persona` como argumento, lo que permite realizar una acción antes o después de que la clase sea instanciada.

---

##### **12.3.2. Decoradores de Métodos**

Los **decoradores de métodos** se aplican a los métodos dentro de una clase y permiten modificar su comportamiento o agregar funcionalidades adicionales. Un decorador de método recibe como parámetros el prototipo de la clase, el nombre del método y una descriptor de propiedad.

**Ejemplo de decorador de método:**

```typescript
function logMetodo(target: any, key: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function(...args: any[]) {
    console.log(`Método ${key} llamado con argumentos: ${args}`);
    return originalMethod.apply(this, args);
  };
}

class Calculadora {
  @logMetodo
  sumar(a: number, b: number): number {
    return a + b;
  }
}

const calc = new Calculadora();
calc.sumar(2, 3);  // "Método sumar llamado con argumentos: [2, 3]"
```

En este ejemplo, el decorador `logMetodo` intercepta la llamada al método `sumar`, loggea los argumentos con los que se llama y luego ejecuta el método original.

---

##### **12.3.3. Decoradores de Propiedades**

Los **decoradores de propiedades** se aplican a las propiedades de una clase y permiten modificar su comportamiento o agregar metadatos. Este tipo de decorador no puede modificar el valor de la propiedad directamente, pero puede ser usado para realizar operaciones cuando se accede a la propiedad.

**Ejemplo de decorador de propiedad:**

```typescript
function logPropiedad(target: any, key: string) {
  let valor: any;

  const getter = function() {
    console.log(`Obteniendo el valor de ${key}: ${valor}`);
    return valor;
  };

  const setter = function(newValue: any) {
    console.log(`Estableciendo el valor de ${key}: ${newValue}`);
    valor = newValue;
  };

  Object.defineProperty(target, key, {
    get: getter,
    set: setter,
  });
}

class Persona {
  @logPropiedad
  nombre: string;

  constructor(nombre: string) {
    this.nombre = nombre;
  }
}

const persona = new Persona('Ana');
persona.nombre = 'Pedro';  // "Estableciendo el valor de nombre: Pedro"
console.log(persona.nombre);  // "Obteniendo el valor de nombre: Pedro"
```

Aquí, el decorador `logPropiedad` intercepta los accesos y modificaciones de la propiedad `nombre`, permitiendo agregar un comportamiento adicional al obtener o establecer el valor.

---

##### **12.3.4. Decoradores de Parámetros**

Los **decoradores de parámetros** se aplican a los parámetros de los métodos de una clase. Este tipo de decorador permite agregar metadatos a los parámetros o realizar alguna acción cuando se pasa un valor a un método.

**Ejemplo de decorador de parámetro:**

```typescript
function logParametro(target: any, key: string, index: number) {
  console.log(`Parámetro en el método ${key} en el índice ${index}`);
}

class Saludo {
  saludar(@logParametro mensaje: string) {
    console.log(mensaje);
  }
}

const saludo = new Saludo();
saludo.saludar('¡Hola!');  // "Parámetro en el método saludar en el índice 0"
```

En este ejemplo, el decorador `logParametro` se aplica al parámetro `mensaje` del método `saludar`, y muestra un mensaje indicando en qué índice del método se encuentra el parámetro decorado.

---

#### **12.4. Uso de Decoradores con Frameworks**

Los decoradores son ampliamente utilizados en frameworks como **Angular**, donde se utilizan para agregar metadatos a clases, métodos, propiedades y parámetros. Por ejemplo, en Angular, decoradores como `@Component`, `@Injectable` o `@Input` son fundamentales para definir el comportamiento de los componentes, servicios y sus propiedades.

---

#### **12.5. Consideraciones y Buenas Prácticas**

- **Modificación de comportamiento**: Los decoradores son poderosos, pero se deben usar con cuidado para no introducir comportamientos inesperados.
- **Uso en bibliotecas y frameworks**: Los decoradores son ideales para situaciones en las que se desea proporcionar una funcionalidad adicional sin modificar directamente el código de la clase, como en los frameworks.
- **Legibilidad**: Aunque los decoradores pueden simplificar el código y hacerlo más declarativo, deben usarse con moderación para evitar que el código se vuelva demasiado complejo o difícil de seguir.

---

#### **12.6. Conclusión**

Los **decoradores** en TypeScript son una característica avanzada que permite aplicar comportamientos adicionales a las clases, métodos, propiedades y parámetros de manera declarativa. Su uso facilita la implementación de patrones de diseño y la creación de bibliotecas y frameworks, proporcionando una forma limpia y estructurada de modificar el comportamiento de las entidades sin cambiar su código directamente. Si bien los decoradores son poderosos, deben usarse con precaución para evitar complicaciones en la legibilidad y el mantenimiento del código.